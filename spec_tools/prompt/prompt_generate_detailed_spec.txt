
# プログラム仕様書作成プロンプト

以下の指示に従い、詳細なプログラム仕様書をステップバイステップで作成してください。

---

## 1. フォルダ構造の解析

`merge.txt`の内容を解析し、プロジェクトのフォルダ構造をリストアップしてください。

- **出力**: フォルダ構造を階層的に表示。
- **追加情報**:
  1. 各ファイルの種類（Pythonコード、設定ファイル、その他）。
  2. ファイル数とフォルダ数の集計。

### **例**
ir_news_release/ ├── config/ ├── data/ ├── docs/ ├── logs/ ├── src/ ├── utils/ ├── init.py ├── main.py

---

## 2. ファイルごとの役割と依存関係

フォルダ構造から取得したすべてのファイルについて、以下の情報を記載してください。（testsフォルダは除外）

- **ファイル名**
- **役割**: 各ファイルがシステムで果たす機能。
- **依存関係**: 他のファイルやモジュールとの関係。

### **例**
| ファイル名               | 役割                                                                 | 依存関係                     |
|--------------------------|----------------------------------------------------------------------|------------------------------|
| `main.py`                | エントリーポイント。処理フローを制御。                               | `config.py`, `operations.py` |
| `\utils\config.py`              | 設定情報を管理。                                                    | `dotenv`                    |

---

## 3. クラス定義の詳細

すべてのPythonファイルに記載されたクラスについて、次の情報を記載してください。

- **クラス名**
- **概要**: クラスが提供する機能や役割。
- **属性**
  - 属性名: 型と説明。
- **メソッド**
  - メソッド名: メソッドの目的。
  - 詳細仕様: 各メソッドの詳細な仕様（関数仕様と同じフォーマット）。
- **依存関係**: 他のモジュール、クラス、または外部ライブラリとの関係。

## 4. 各ファイル内の関数リスト

リストアップされたすべてのPythonファイルについて、次の情報を記載してください。

- **関数名**
- **概要**: 関数の目的や役割。

### **例**
ファイル名: main.py
setup_project_path: プロジェクトのルートパスを設定。
run_process: 指定された処理を実行。
edinet_process: EDINET APIを使用してドキュメントを取得。

---

## 5. 関数ごとの詳細仕様

上記でリストアップしたすべての関数について、詳細な仕様を記載してください。

- **関数名**
- **概要**: 関数が提供する機能。
- **入力**: 引数の名前、型、説明。
- **出力**: 戻り値の型と説明。
- **内部処理**: 処理の流れをステップごとに記載。
- **依存関係**: 他のモジュールや関数との関係。

### **例**
関数名: run_process
概要: 指定された処理を実行する。
入力:
process_func (Callable): 実行する関数。
config (Optional[Any]): 設定データ。
出力: なし
内部処理:
プロセス開始をログに記録。
処理を実行。
エラーがあればログに記録し、例外を送出。
依存関係:
ログ管理: loggingモジュール。
設定情報: configから取得。

---

## 6. データフローとモジュール相互作用

プロジェクト全体のデータフローとモジュール間の相互作用を明確にしてください。

- **入力元**: どのモジュールがデータを受け取るか（例: API、設定ファイル）。
- **処理順序**: データが各モジュールを通過する順序。
- **出力先**: 処理結果がどこに保存・送信されるか。

### **例**
main.pyがconfig.pyから設定情報を取得。
operations.pyでEDINET APIからデータを取得し、ローカルに保存。
保存されたファイルをGoogle Driveにアップロード。