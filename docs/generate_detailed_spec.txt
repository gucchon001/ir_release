以下の機能要件仕様書およびソースコードの情報を基にして、詳細なプログラム仕様書を作成してください。指定する内容には実装の詳細、データフロー、モジュール間の相互作用を具体的に含める必要があります。出力は次の形式を使って作成してください。

# プログラム仕様書

## 1. システム概要
システムの目的、全体的な機能、アーキテクチャなどシステムの概要を詳細に説明します。システムがどのように機能し、どのような役割を果たすのかを包括的に記述してください。

## 2. ファイルごとの役割と詳細説明
各ソースコードファイルの役割を説明し、それぞれが具体的にどの機能を提供し、どの他のファイルに依存しているのかを説明してください。

## 3. 関数ごとの役割と詳細説明
各関数について、引数や戻り値について詳細に説明し、関数内部で行われる処理、またエラーハンドリングのロジックについても記述します。

## 4. 非機能要件
システムの性能要件、セキュリティ要件、およびその他の技術的な非機能要件について説明してください。システムが満たすべき性能目標やセキュリティ上の考慮事項を具体的に示します。

## 5. 技術要件
システムが必要とするライブラリ、バージョン、設定、依存関係について説明します。これには適切な開発環境や設定手順なども含まれます。

ライブラリは、requrements.txtの内容を取得して一覧表示

## 6. 使用手順と注意事項
システムのセットアップ手順、利用方法、注意事項、ならびに既知の制限事項について記述します。
batファイルの使い方（環境、テスト等）

# Steps

1. **情報の確認**: 提供される機能要件仕様書とソースコードを基に、システム全体の仕組みを理解します。注目すべき部分はシステムの役割、機能、各モジュールの関連性、およびエラーハンドリングです。
2. **情報の整理**: 各ファイルや関数の役割を特定し、それらの関係や依存を明らかにします。また、非機能要件や技術的な要件も整理します。
3. **セクションの記述**: それぞれのセクション（システム概要、ファイル役割、関数説明、非機能要件、技術要件、使用手順）に適した内容を具体的に埋めていきます。
4. **相互作用の記述**: モジュール間の相互作用やデータフローが明示されているか確認し、不足があれば詳細に記述します。

# Output Format

- 各セクションは明確なヘッダと詳細な説明を含みます。
- セクションは「##」でラベル化し、各項目について具体的かつ明瞭に記述してください。
- 説明は段階的に、システム全体から細部の関数に掘り下げる形式で行ってください。
  
# Examples

**システム概要の例:**
- 本システムは、ユーザーが特定のデータを入力するとXXXX機能を提供するためのXXXXアプリケーションです。
- 全体構成は、ユーザーインターフェイス、バックエンド処理、データベース管理の三層から成り、各層は適切に分離されています。

**関数の説明の例:**
- 関数名: `calculateTotal`
  - 入力: `priceList (リスト[float])`
  - 処理内容: 入力リストに含まれる各品目の価格合計を計算します。処理中に、負の値が存在する場合エラーを返します。
  - 出力: 合計 (`float`)

**非機能要件の例:**
- ソフトウェアは1,000件以下のトランザクションを1秒未満で処理する性能を保証します。
- ユーザーデータは暗号化を使用して保護する必要があります。また、すべてのデータ通信にはSSL/TLSが使用されます。

# Notes

- すべての関数やモジュールについて、処理内容の明細に加え、エラーハンドリングおよび想定される例外について特に注意してください。
- 使用手順に関しては、システムの初期設定の詳細、依存ファイルのインストール方法についても記述を求められます。